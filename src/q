GIT-CLONE(1)                                   Git Manual                                  GIT-CLONE(1)



NNAAMMEE
       git-clone - Clone a repository into a new directory

SSYYNNOOPPSSIISS
       _g_i_t _c_l_o_n_e [--template=<template_directory>]
                 [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
                 [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
                 [--separate-git-dir <git dir>]
                 [--depth <depth>] [--[no-]single-branch]
                 [--recursive | --recurse-submodules] [--] <repository>
                 [<directory>]


DDEESSCCRRIIPPTTIIOONN
       Clones a repository into a newly created directory, creates remote-tracking branches for each
       branch in the cloned repository (visible using ggiitt bbrraanncchh --rr), and creates and checks out an
       initial branch that is forked from the cloned repository’s currently active branch.

       After the clone, a plain ggiitt ffeettcchh without arguments will update all the remote-tracking
       branches, and a ggiitt ppuullll without arguments will in addition merge the remote master branch into
       the current master branch, if any (this is untrue when "--single-branch" is given; see below).

       This default configuration is achieved by creating references to the remote branch heads under
       rreeffss//rreemmootteess//oorriiggiinn and by initializing rreemmoottee..oorriiggiinn..uurrll and rreemmoottee..oorriiggiinn..ffeettcchh configuration
       variables.

OOPPTTIIOONNSS
       --local, -l
           When the repository to clone from is on a local machine, this flag bypasses the normal "Git
           aware" transport mechanism and clones the repository by making a copy of HEAD and everything
           under objects and refs directories. The files under ..ggiitt//oobbjjeeccttss// directory are hardlinked
           to save space when possible.

           If the repository is specified as a local path (e.g., //ppaatthh//ttoo//rreeppoo), this is the default,
           and --local is essentially a no-op. If the repository is specified as a URL, then this flag
           is ignored (and we never use the local optimizations). Specifying ----nnoo--llooccaall will override
           the default when //ppaatthh//ttoo//rreeppoo is given, using the regular Git transport instead.

       --no-hardlinks
           Force the cloning process from a repository on a local filesystem to copy the files under
           the ..ggiitt//oobbjjeeccttss directory instead of using hardlinks. This may be desirable if you are
           trying to make a back-up of your repository.

       --shared, -s
           When the repository to clone is on the local machine, instead of using hard links,
           automatically setup ..ggiitt//oobbjjeeccttss//iinnffoo//aalltteerrnnaatteess to share the objects with the source
           repository. The resulting repository starts out without any object of its own.

           NNOOTTEE: this is a possibly dangerous operation; do nnoott use it unless you understand what it
           does. If you clone your repository using this option and then delete branches (or use any
           other Git command that makes any existing commit unreferenced) in the source repository,
           some objects may become unreferenced (or dangling). These objects may be removed by normal
           Git operations (such as ggiitt ccoommmmiitt) which automatically call ggiitt ggcc ----aauuttoo. (See ggiitt--ggcc(1).)
           If these objects are removed and were referenced by the cloned repository, then the cloned
           repository will become corrupt.

           Note that running ggiitt rreeppaacckk without the --ll option in a repository cloned with --ss will copy
           objects from the source repository into a pack in the cloned repository, removing the disk
           space savings of cclloonnee --ss. It is safe, however, to run ggiitt ggcc, which uses the --ll option by
           default.

           If you want to break the dependency of a repository cloned with --ss on its source repository,
           you can simply run ggiitt rreeppaacckk --aa to copy all objects from the source repository into a pack
           in the cloned repository.

       --reference <repository>
           If the reference repository is on the local machine, automatically setup
           ..ggiitt//oobbjjeeccttss//iinnffoo//aalltteerrnnaatteess to obtain objects from the reference repository. Using an
           already existing repository as an alternate will require fewer objects to be copied from the
           repository being cloned, reducing network and local storage costs.

           NNOOTTEE: see the NOTE for the ----sshhaarreedd option.

       --quiet, -q
           Operate quietly. Progress is not reported to the standard error stream. This flag is also
           passed to the ‘rsync’ command when given.

       --verbose, -v
           Run verbosely. Does not affect the reporting of progress status to the standard error
           stream.

       --progress
           Progress status is reported on the standard error stream by default when it is attached to a
           terminal, unless -q is specified. This flag forces progress status even if the standard
           error stream is not directed to a terminal.

       --no-checkout, -n
           No checkout of HEAD is performed after the clone is complete.

       --bare
           Make a _b_a_r_e Git repository. That is, instead of creating <<ddiirreeccttoorryy>> and placing the
           administrative files in <<ddiirreeccttoorryy>>//..ggiitt, make the <<ddiirreeccttoorryy>> itself the $$GGIITT__DDIIRR. This
           obviously implies the --nn because there is nowhere to check out the working tree. Also the
           branch heads at the remote are copied directly to corresponding local branch heads, without
           mapping them to rreeffss//rreemmootteess//oorriiggiinn//. When this option is used, neither remote-tracking
           branches nor the related configuration variables are created.

       --mirror
           Set up a mirror of the source repository. This implies ----bbaarree. Compared to ----bbaarree, ----mmiirrrroorr
           not only maps local branches of the source to local branches of the target, it maps all refs
           (including remote-tracking branches, notes etc.) and sets up a refspec configuration such
           that all these refs are overwritten by a ggiitt rreemmoottee uuppddaattee in the target repository.

       --origin <name>, -o <name>
           Instead of using the remote name oorriiggiinn to keep track of the upstream repository, use
           <<nnaammee>>.

       --branch <name>, -b <name>
           Instead of pointing the newly created HEAD to the branch pointed to by the cloned
           repository’s HEAD, point to <<nnaammee>> branch instead. In a non-bare repository, this is the
           branch that will be checked out.  ----bbrraanncchh can also take tags and detaches the HEAD at that
           commit in the resulting repository.

       --upload-pack <upload-pack>, -u <upload-pack>
           When given, and the repository to clone from is accessed via ssh, this specifies a
           non-default path for the command run on the other end.

       --template=<template_directory>
           Specify the directory from which templates will be used; (See the "TEMPLATE DIRECTORY"
           section of ggiitt--iinniitt(1).)

       --config <key>=<value>, -c <key>=<value>
           Set a configuration variable in the newly-created repository; this takes effect immediately
           after the repository is initialized, but before the remote history is fetched or any files
           checked out. The key is in the same format as expected by ggiitt--ccoonnffiigg(1) (e.g.,
           ccoorree..eeooll==ttrruuee). If multiple values are given for the same key, each value will be written to
           the config file. This makes it safe, for example, to add additional fetch refspecs to the
           origin remote.

       --depth <depth>
           Create a _s_h_a_l_l_o_w clone with a history truncated to the specified number of revisions.

       --[no-]single-branch
           Clone only the history leading to the tip of a single branch, either specified by the
           ----bbrraanncchh option or the primary branch remote’s HHEEAADD points at. When creating a shallow clone
           with the ----ddeepptthh option, this is the default, unless ----nnoo--ssiinnggllee--bbrraanncchh is given to fetch
           the histories near the tips of all branches. Further fetches into the resulting repository
           will only update the remote-tracking branch for the branch this option was used for the
           initial cloning. If the HEAD at the remote did not point at any branch when ----ssiinnggllee--bbrraanncchh
           clone was made, no remote-tracking branch is created.

       --recursive, --recurse-submodules
           After the clone is created, initialize all submodules within, using their default settings.
           This is equivalent to running ggiitt ssuubbmmoodduullee uuppddaattee ----iinniitt ----rreeccuurrssiivvee immediately after the
           clone is finished. This option is ignored if the cloned repository does not have a
           worktree/checkout (i.e. if any of ----nnoo--cchheecckkoouutt/--nn, ----bbaarree, or ----mmiirrrroorr is given)

       --separate-git-dir=<git dir>
           Instead of placing the cloned repository where it is supposed to be, place the cloned
           repository at the specified directory, then make a filesystem-agnostic Git symbolic link to
           there. The result is Git repository can be separated from working tree.

       <repository>
           The (possibly remote) repository to clone from. See the URLS section below for more
           information on specifying repositories.

       <directory>
           The name of a new directory to clone into. The "humanish" part of the source repository is
           used if no directory is explicitly given (rreeppoo for //ppaatthh//ttoo//rreeppoo..ggiitt and ffoooo for
           hhoosstt..xxzz::ffoooo//..ggiitt). Cloning into an existing directory is only allowed if the directory is
           empty.

GGIITT UURRLLSS
       In general, URLs contain information about the transport protocol, the address of the remote
       server, and the path to the repository. Depending on the transport protocol, some of this
       information may be absent.

       Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for
       fetching and rsync can be used for fetching and pushing, but these are inefficient and
       deprecated; do not use them).

       The native transport (i.e. git:// URL) does no authentication and should be used with caution on
       unsecured networks.

       The following syntaxes may be used with them:

       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/

       ·   git://host.xz[:port]/path/to/repo.git/

       ·   http[s]://host.xz[:port]/path/to/repo.git/

       ·   ftp[s]://host.xz[:port]/path/to/repo.git/

       ·   rsync://host.xz/path/to/repo.git/

       An alternative scp-like syntax may also be used with the ssh protocol:

       ·   [user@]host.xz:path/to/repo.git/

       This syntax is only recognized if there are no slashes before the first colon. This helps
       differentiate a local path that contains a colon. For example the local path ffoooo::bbaarr could be
       specified as an absolute path or ..//ffoooo::bbaarr to avoid being misinterpreted as an ssh url.

       The ssh and git protocols additionally support ~username expansion:

       ·   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

       ·   git://host.xz[:port]/~[user]/path/to/repo.git/

       ·   [user@]host.xz:/~[user]/path/to/repo.git/

       For local repositories, also supported by Git natively, the following syntaxes may be used:

       ·   /path/to/repo.git/

       ·   file:///path/to/repo.git/

       These two syntaxes are mostly equivalent, except the former implies --local option.

       When Git doesn’t know how to handle a certain transport protocol, it attempts to use the
       _r_e_m_o_t_e_-_<_t_r_a_n_s_p_o_r_t_> remote helper, if one exists. To explicitly request a remote helper, the
       following syntax may be used:

       ·   <transport>::<address>

       where <address> may be a path, a server and path, or an arbitrary URL-like string recognized by
       the specific remote helper being invoked. See ggiittrreemmoottee--hheellppeerrss(1) for details.

       If there are a large number of similarly-named remote repositories and you want to use a
       different format for them (such that the URLs you use will be rewritten into URLs that work),
       you can create a configuration section of the form:

                   [url "<actual url base>"]
                           insteadOf = <other url base>


       For example, with this:

                   [url "git://git.host.xz/"]
                           insteadOf = host.xz:/path/to/
                           insteadOf = work:


       a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be rewritten in any context
       that takes a URL to be "git://git.host.xz/repo.git".

       If you want to rewrite URLs for push only, you can create a configuration section of the form:

                   [url "<actual url base>"]
                           pushInsteadOf = <other url base>


       For example, with this:

                   [url "ssh://example.org/"]
                           pushInsteadOf = git://example.org/


       a URL like "git://example.org/path/to/repo.git" will be rewritten to
       "ssh://example.org/path/to/repo.git" for pushes, but pulls will still use the original URL.

EEXXAAMMPPLLEESS
       ·   Clone from upstream:

               $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
               $ cd my-linux
               $ make


       ·   Make a local clone that borrows from the current directory, without checking things out:

               $ git clone -l -s -n . ../copy
               $ cd ../copy
               $ git show-branch


       ·   Clone from upstream while borrowing from an existing local directory:

               $ git clone --reference /git/linux.git \
                       git://git.kernel.org/pub/scm/.../linux.git \
                       my-linux
               $ cd my-linux


       ·   Create a bare repository to publish your changes to the public:

               $ git clone --bare -l /home/proj/.git /pub/scm/proj.git


GGIITT
       Part of the ggiitt(1) suite



Git 2.0.3                                      07/25/2014                                  GIT-CLONE(1)
