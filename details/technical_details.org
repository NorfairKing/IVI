* Technical Details
** Scripts
   Scripts are never included in the IVI repository.
   Scripts are developped independently, based on the IVI API.

   A script consists of at least the following elements.

#+BEGIN_EXAMPLE
ScriptDirectory
|- script.ivi
|- Script.hs
#+END_EXAMPLE

   Note that only the entry function of the script needs to be in haskell.
   The script may of course use other languages too, but the safety of this
   is left to the script developer.

*** Script Directory
    - The script directory name *must* start with a capital letter.
    - The script directory name should use Pascal casing.
      example:
#+BEGIN_EXAMPLE
AVeryLongScriptDirectoryNameExample
#+END_EXAMPLE

*** IVI file
    - A script directory *must* contain *at least one* '.ivi' file, containing the script configuration
    - There can be more than one '.ivi' files, one for every function to execute.
      In this way, multiple scripts can be packaged into one directory.

    A '.ivi' file is structure in the following way:
#+BEGIN_EXAMPLE
sourceFileName = "Script.hs"
name = "script_name"
executeFunctionName = "executeFunction"
regexes = [
            "regex1"
          , "foo(die)?bar"
          ]
#+END_EXAMPLE
    - SourceFileName: the name of the source code file where the execute function is located (Pascal Casing)
    - name: the name of the script (lowercase with underscores)
    - executeFunctionName: the name of the function to execute at script entry (camelCasing)
    - regexes: the list of regexes from which the script can be recognised.
*** Source file
    Any source file in the IVI script directory must have the following lines:
#+BEGIN_EXAMPLE
module Scripts.ScriptDirectory.SourceFileName where
import Script
#+END_EXAMPLE
    Here, Scripts is constant, ScriptDirectory is the name of the script directory
    and SourceFileName is the name of the source (.hs) file where the execute function is defined.

    The source file described in the '.ivi' file must contain a function as described by the 'executeFunctionName' line.
    This function *must* have the following signature:
#+BEGIN_EXAMPLE
-- | A description of the workings of the script.
execute :: IVIScriptArgs -> IO IVIScriptResult
execute args = ...
#+END_EXAMPLE
** Bootstrap
   The bootstrap procedure is a way of making IVI compile *without* using any dynamic invokation.
   #+CAPTION: The structure of the vanilla IVI repository.
   [[file:dep_graph_empty.png]]

   The above image shows what the repository looks like when you first clone it.
   When you install some scripts, the repository will look more like the following figure.
   #+CAPTION: The structure of the IVI repository with two example scripts added.
   [[file:dep_graph.png]]

   The semantics of the illustration
    - blue ellipse: symlinked file
    - blue arrow: symlink

    - black rectangle: directory
    - black ellipse: IVI source file (.hs)
    - black arrow: "imports" (in IVI)

    - red ellipse: executable (.bin)
    - red arrow: "compiles to"

    - green rectangle: bootstrap directory
    - green ellipse: bootstrap source file (.hs)
    - green arrow: "imports" (in bootstrap procedure)
    - green double arrow: "produces"

    - brown dashed rectangle: script directory
    - brown ellipse: script source file
    - brown dotted ellipse: script file (.ivi)

*** The procedure
    When the bootstrap procedure (bootstrap.bin) is executed, the following happens.
    - The procedure finds all directories in the scripts directory that contain at least one ivi file.
    - For each one of these directories
      - The procedure checks if the IVI version and the script version are compatible.
      - The procedure parses the ivi files.
      - For each one of these ivi files
        - The procedure generates an entry in the scripts list file
        - and the import statement for it.

    Note: If there is something wrong with the scripts, the bootstrap procedure will not generate errors.
    This will happen at IVI compile time.
    
